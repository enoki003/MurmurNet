# MurmurNet Slot アーキテクチャ設定ファイル
# Slotアーキテクチャを使用した多角的な出力生成

# === 基本設定 ===
debug: true
use_slots: true           # Slotアーキテクチャを有効化
use_collaboration: true   # 協調システムを有効化（重要：議論を実現）
use_memory: true          # 会話記憶を使用
use_summary: false        # 従来の要約は無効（Slotが代替）
use_parallel: false       # Slotは逐次実行

# === 構造化Blackboard設定 ===
use_structured_blackboard: true   # 構造化Blackboardを有効化
blackboard_debug: true            # Blackboardデバッグ出力
max_blackboard_history: 1000      # 最大履歴保持数
blackboard_version_tolerance: 1   # バージョン競合許容範囲

# === Slot固有設定 ===
slot_max_output_length: 300      # Slot出力の最大文字数（議論に必要な長さ）
slot_temperature: 0.5            # Slot生成時の温度パラメータ（議論の多様性確保）
slot_top_p: 0.9                  # Slot生成時のtop_p
slot_similarity_threshold: 0.7   # 類似度判定の閾値
max_slot_entries: 100            # 最大Slotエントリ数

# === 協調システム設定 ===
collaboration_intensity: "high"   # 協調の強度（low/medium/high）
enable_direct_confrontation: true # 直接対立を許可
require_citation: true            # 他者の意見の引用を必須とする
max_interaction_rounds: 4         # 最大相互作用回数

# === モデル設定 ===
# 使用するモデルを指定
models:
  # チャット用モデル（Slot生成に使用）
  chat_model: "llm-jp/llm-jp-3-150m-instruct3"
  # テキスト生成用モデル
  text_model: "llm-jp/llm-jp-3-150m"
  # モデルキャッシュディレクトリ
  cache_dir: "./cache/models"

# === 埋め込み設定 ===
embedding:
  model_name: "all-MiniLM-L6-v2"
  cache_folder: "./models/st_cache"
  local_files_only: true
  device: "cpu"                  # GPU使用の場合は "cuda"

# === テンプレート破損対策設定 ===
# 根本原因（テンプレート断片の生成）を防ぐ安全機構
enable_template_validation: true    # 応答のバリデーション機能を有効化

# === Phase 5-8: 分散システム拡張設定 ===

# Phase 5: 分散協調メカニズム
distributed_coordination:
  enable: true
  heartbeat_interval: 5.0          # ハートビート間隔（秒）
  failure_timeout: 15.0            # 障害検出タイムアウト（秒）
  consensus_algorithm: "simple_majority"  # 合意アルゴリズム（simple_majority/raft/pbft）
  load_balance_strategy: "hybrid"  # 負荷分散戦略（round_robin/least_loaded/capability_aware/hybrid）
  max_load_threshold: 0.8          # 最大負荷しきい値

# Phase 6: 監視・メトリクス
monitoring:
  enable_prometheus: true          # Prometheusメトリクス有効化
  prometheus_port: 8000           # Prometheusサーバーポート
  metrics_collection_interval: 10.0  # メトリクス収集間隔（秒）
  metrics_retention_hours: 24     # メトリクス保持時間（時間）
  
  # アラート設定
  alert_check_interval: 30.0      # アラートチェック間隔（秒）
  notification_channels:          # 通知チャンネル
    - type: "webhook"
      url: "http://localhost:8080/alerts"
    # - type: "slack"
    #   webhook_url: "YOUR_SLACK_WEBHOOK_URL"
  
  # Grafana設定（オプション）
  # grafana_url: "http://localhost:3000"
  # grafana_api_key: "YOUR_GRAFANA_API_KEY"

# Phase 7: オートスケーリング
autoscaling:
  enable: true
  scaling_strategy: "hybrid"      # スケーリング戦略
  min_workers: 1                  # 最小ワーカー数
  max_workers: 5                  # 最大ワーカー数
  target_cpu_utilization: 0.7    # 目標CPU使用率
  target_memory_utilization: 0.8 # 目標メモリ使用率
  max_queue_length: 50           # 最大キュー長
  scale_up_threshold: 0.8        # スケールアップしきい値
  scale_down_threshold: 0.3      # スケールダウンしきい値
  scale_up_cooldown: 300         # スケールアップクールダウン（秒）
  scale_down_cooldown: 600       # スケールダウンクールダウン（秒）
  evaluation_period: 60          # 評価期間（秒）
  enable_predictive_scaling: false  # 予測スケーリング（実験的）
  
  # Kubernetes設定（オプション）
  use_kubernetes: false          # Kubernetes統合
  # kubernetes_namespace: "default"
  # deployment_name: "murmurnet-workers"
  # worker_image: "murmurnet:latest"
  # worker_cpu_request: "100m"
  # worker_cpu_limit: "500m"
  # worker_memory_request: "128Mi"
  # worker_memory_limit: "512Mi"

# Phase 8: パフォーマンス最適化
performance_optimization:
  enable: true
  
  # レイテンシ最適化
  enable_latency_tracing: true    # レイテンシトレース有効化
  trace_sample_rate: 0.1          # トレースサンプリング率
  optimization_threshold_ms: 1000 # 最適化しきい値（ms）
  
  # メモリ最適化
  enable_memory_tracking: true    # メモリ追跡有効化
  enable_gc_optimization: true    # ガベージコレクション最適化
  memory_warning_threshold_mb: 512   # メモリ警告しきい値（MB）
  memory_critical_threshold_mb: 1024 # メモリクリティカルしきい値（MB）
  
  # ネットワーク最適化
  enable_compression: true        # データ圧縮有効化
  compression_algorithm: "lz4"    # 圧縮アルゴリズム（lz4/zstd）
  compression_threshold_bytes: 1024  # 圧縮しきい値（バイト）
  enable_batching: true          # バッチング有効化
  batch_size: 10                 # バッチサイズ
  batch_timeout_ms: 100          # バッチタイムアウト（ms）
  
  # プロファイリング（開発用）
  enable_profiling: false        # パフォーマンスプロファイリング
  profile_output_dir: "./profiles"  # プロファイル出力ディレクトリ
  
  # 自動最適化
  enable_auto_optimization: true # 自動最適化有効化
  optimization_interval: 300     # 最適化間隔（秒）

# === Slot エージェント役割マッピング ===
slot_agent_roles:
  ReformulatorSlot: "REFORMULATOR"   # 改良提案
  CriticSlot: "CRITIC"               # 批判的分析
  SupporterSlot: "SUPPORTER"         # 支持・推進
  SynthesizerSlot: "SYNTHESIZER"     # 統合・要約
  OutputSlot: "OUTPUT"               # 最終出力

# === エージェント役割マッピング設定 ===
agent_roles:
  ReformulatorSlot: "reformulator"  # 問題再定式化
  CriticSlot: "critic"              # 批判的分析
  SupporterSlot: "supporter"        # 支持的意見
  SynthesizerSlot: "synthesizer"    # 統合・要約
  OutputAgent: "output"             # 最終出力（読み取り専用）

# === 構造化Blackboard詳細設定 ===
structured_blackboard:
  version_check_strict: false       # 厳密なバージョンチェック
  auto_commit: true                 # 自動コミット
  enable_history: true              # 操作履歴を有効化
  compress_history: false           # 履歴圧縮（大量データ時）

# === 改良版Slot設定 ===
use_enhanced_slots: true          # 改良版Slotを使用
enhanced_slot_features:
  deep_analysis: true             # 深い分析モード
  role_specialization: true       # 役割特化
  responsibility_clear: true      # 責任明確化
  rag_integration: true          # RAG統合

# === RAG設定改良 ===
rag_mode: "zim"                  # dummy → zim に変更（実際のRAG使用）
zim_path: "./data/sample.zim"    # ZIMファイルパス（サンプル）
rag_top_k: 3                     # RAG検索結果数
rag_min_score: 0.5              # RAG最小スコア

# === Slot専門化設定 ===
slot_specialization:
  ReformulatorSlot:
    focus: "deep_analysis"        # 深い分析に特化
    prompt_style: "analytical"    # 分析的プロンプト
  CriticSlot:
    focus: "constructive_criticism" # 建設的批判に特化
    prompt_style: "critical"      # 批判的プロンプト
  SupporterSlot:
    focus: "creative_expansion"   # 創造的拡張に特化
    prompt_style: "creative"      # 創造的プロンプト
  SynthesizerSlot:
    focus: "responsible_integration" # 責任明確な統合
    prompt_style: "integrative"   # 統合的プロンプト
    require_justification: true   # 判断根拠必須

# === 知的統合設定（IntelligentSynthesizer用） ===
use_intelligent_synthesizer: true      # IntelligentSynthesizerを使用
use_template_builder: true             # テンプレートビルダーを使用（破損対策）
enable_auto_recovery: true             # 自動復旧を有効化
max_retry_attempts: 1                  # 最大再試行回数
synthesis_confidence_threshold: 0.6    # 統合の信頼度閾値
evidence_weight: 0.4                   # 証拠の重み
logic_weight: 0.3                      # 論理の重み
relevance_weight: 0.3                  # 関連性の重み

# === テンプレート破損対策設定 ===
template_corruption_prevention:
  enable_validation: true              # 応答検証を有効化
  enable_auto_fix: true               # 自動修復を有効化
  max_pipe_chars: 2                   # 連続パイプ文字の最大数
  max_equals_chars: 4                 # 連続等号文字の最大数
  min_japanese_chars: 5               # 最小日本語文字数
  fallback_response_enabled: true     # フォールバック応答を有効化
